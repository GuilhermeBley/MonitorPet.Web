@page "/"

@using MonitorPet.Ui.Shared.Model.Dosador

@inject HttpClient _client

<PageTitle>Dosadores</PageTitle>

<div class="container-md mt-3">

    <ErrorComponent Errors="Errors"></ErrorComponent>
    <SuccessComponent Successes="SuccessMessages"></SuccessComponent>

    <div class="row text-end">
        <div>
            <button id="addDosador" type="button" class="btn btn-outline-primary" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                <i class="bi bi-plus-circle-fill"></i>
                Adicionar dosadores
            </button>
            <div class="dropdown-menu" aria-labelledby="addDosador">
                <EditForm class="mx-2" Model="_addDosadorViewModel" OnValidSubmit="(async ()=> await AddDosador())">
                    <h6 class="dropdown-header">Insira o novo dosador</h6>
                    <div class="input-group mb-3">
                        <InputText type="text" title="Token do novo dosador" class="form-control" aria-label="Código dosador" @bind-Value="_addDosadorViewModel.Token" />
                        <button class="btn btn-outline-secondary" type="submit">Adicionar</button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
    <hr />
    <div class="row text-center">

        @if (!Dosadores.Any() && LoadDosadores == StateMessage.Sent)
        {
            <p>Nenhum dosador cadastrado :(</p>
        }

        @if (LoadDosadores == StateMessage.Sending)
        {
            <LoadComponent></LoadComponent>
        }

        @foreach (var dosador in Dosadores)
        {
            <div class="col-lg-4 mt-3">

                <p>
                    <div class="btn-group dropright">
                        <button class="btn btn-light border-0 bg-transparent" type="button" id="optPet-@dosador.IdDosador" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <img class="rounded-circle" src="@(string.IsNullOrEmpty(dosador.ImgUrl) ? Default.ImgUrl.DefaultIconUrl :  dosador.ImgUrl)" width="140" height="140">
                            <br />
                            <span class="fs-3">@dosador.Nome </span>
                        </button>
                        <div class="dropdown-menu" aria-labelledby="optPet-@dosador.IdDosador">
                            <a class="dropdown-item" href="/Dashboard/@dosador.IdDosador.ToString()">
                                <i class="fa-solid fa-chart-simple"></i> Gráficos
                            </a>
                            <a class="dropdown-item" href="/agendamentos/@dosador.IdDosador.ToString()">
                                <i class="fa-solid fa-bowl-food"></i> Agendamentos
                            </a>
                            <a class="dropdown-item" href="#" @onclick="(() => EditPet(dosador.IdDosador))" @onclick:preventDefault>
                                <i class="fa-solid fa-pen-to-square"></i> Editar pet
                            </a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item @(Dosadores.Count() < 2 ? "disabled" : null)"
                           title="@(Dosadores.Count() < 2 ? "O usupario deve conter pelo menos um pet." : "Clique aqui para remover o pet.")"
                           href="#" @onclick="(async () => await RemoveDosador(dosador.IdDosador))"
                           @onclick:preventDefault>
                                <i class="fa-solid fa-trash"></i> Remover Pet
                            </a>
                        </div>
                    </div>
                </p>
                <p class="mb-0">
                    <span class="fs-5" title="Útilma vez visto em '@(dosador.LastSeen?.ToLocalTime().ToString() ?? "Não registrado.")'">
                        @if (dosador.LastSeen is not null &&
                       dosador.LastSeen.Value.ToUniversalTime() >= LastRefresh.ToUniversalTime().AddMinutes(-1.5))
                        {
                            <span><i class="fa-solid fa-circle" style="color: #00ff1e;"></i> online</span>
                        }
                        else
                        {
                            <span><i class="fa-solid fa-circle" style="color: #ff0000;"></i> offline</span>
                        }
                    </span>
                </p>
                <p>
                    <small class="text-secondary" style="font-size: 0.8rem">
                        @(dosador.LastSeen.HasValue ? $"Última vez visto em: '{dosador.LastSeen.Value.ToLocalTime().ToString()}'" : null)
                    </small>
                </p>
                <p class="mb-0">
                    <span class="fs-5" title="Quantidade atual de ração: @dosador.CurrentWeight gramas.">

                        @if (ContainsRacao(dosador))
                        {
                            <span><i class="fa-solid fa-bone" style="color: #00ff1e;"></i> Contém ração</span>
                        }
                        else
                        {
                            <span><i class="fa-solid fa-bone" style="color: #ff0000;"></i> Não contém ração</span>
                        }

                    </span>
                </p>
                <p class="m-0 p-0">
                    @if (IsUnavailableMoreThanTwoDays(dosador) && !ContainsRacao(dosador))
                    {
                        <small class="text-secondary" style="font-size: 0.8rem">
                            Pet sem atualização nos últimos dois dias, possívelmente está sem ração.
                        </small>
                    }
                    else if (!IsUnavailableMoreThanTwoDays(dosador) && !ContainsRacao(dosador))
                    {
                        <small class="text-secondary" style="font-size: 0.8rem">
                            Pet está sem ração.
                        </small>
                    }
                    else
                    {
                        <small class="text-secondary" style="font-size: 0.8rem">
                            Quantidade atual de ração: @dosador.CurrentWeight gramas.
                        </small>
                    }
                </p>
            </div>
        }
    </div>

    <ModalComponent @ref="_modalEdit">
        <Header>
            <h3>Editar pet </h3>
        </Header>
        <Body>
            <ErrorComponent Errors="ErrorsEditPet"></ErrorComponent>
            <EditForm Model="_putDosadorViewModel" OnValidSubmit="(async ()=> await PutEditPetAndSetDosadores())">
                <label for="editName">Nome do Pet</label>
                <InputText class="form-control" id="editName" @bind-Value="_putDosadorViewModel.NewName"></InputText>
                <label for="editPhoto" class="form-label mt-3 mb-0 p-0">Selecione uma nova imagem</label>
                <InputFile id="editPhoto" class="form-control" OnChange="(async (e)=> await LoadFilesEditPet(e))"></InputFile>
                <hr />
                <button type="submit"
                        class="btn btn-primary @(_onPutMessage == StateMessage.Sending ? "disabled" : null)">
                    Salvar
                </button>
                <button type="button"
                        class="btn btn-secondary @(_onPutMessage == StateMessage.Sending ? "disabled" : null)"
                        @onclick="CloseEditPet">
                    Fechar
                </button>
            </EditForm>
        </Body>
    </ModalComponent>
</div>

@code {
    private static string[] _allowedFilesTypes = new string[] { "jpg", "jpeg", "png" };

    private DateTime LastRefresh { get; set; }
    private List<string> Errors { get; } = new();
    private List<string> SuccessMessages { get; } = new();
    private List<string> ErrorsEditPet { get; } = new();
    private IEnumerable<JoinUsuarioDosadorInfoViewModel> Dosadores { get; set; } =
        Enumerable.Empty<JoinUsuarioDosadorInfoViewModel>();
    private StateMessage LoadDosadores { get; set; } = StateMessage.Sending;

    private ModalComponent? _modalEdit { get; set; }

    private AddDosadorViewModel _addDosadorViewModel { get; } = new();

    private Guid? IdEditDosador { get; set; }
    private PutDosadorViewModel _putDosadorViewModel { get; } = new();

    private StateMessage _onPutMessage = StateMessage.None;

    protected override async Task OnInitializedAsync()
    {
        LastRefresh = DateTime.UtcNow;
        await TrySetDosadores();
    }

    private async Task TrySetDosadores()
    {
        try
        {
            LoadDosadores = StateMessage.Sending;
            await SetDosadores();
            LoadDosadores = StateMessage.Sent;
        }
        catch
        {
            LoadDosadores = StateMessage.None;
            Errors.Add("Falha ao coletar dosadores.");
        }
    }

    private async Task SetDosadores()
    {
        using var response = await _client.GetAsync("/api/dosador/info/all");

        var errorsResponse = await response.TryGetErrors();

        if (errorsResponse.ContainsError)
        {
            Errors.Add("Falha em coleta de dosadores.");
            return;
        }

        if (response.StatusCode == System.Net.HttpStatusCode.NoContent)
        {
            Dosadores = Enumerable.Empty<JoinUsuarioDosadorInfoViewModel>();
            return;
        }

        Dosadores = await response.Content.ReadFromJsonAsync<IEnumerable<JoinUsuarioDosadorInfoViewModel>>()
            ?? Enumerable.Empty<JoinUsuarioDosadorInfoViewModel>();
    }

    private void EditPet(Guid idDosador)
    {
        ErrorsEditPet.Clear();
        IdEditDosador = idDosador;
        _putDosadorViewModel.NewName = Dosadores.FirstOrDefault(d => d.IdDosador == idDosador)?.Nome ?? string.Empty;
        _putDosadorViewModel.NewImage = new byte[0];
        _putDosadorViewModel.UpdateImg = false;

        _modalEdit?.Open();
    }

    private void CloseEditPet()
    {
        IdEditDosador = null;
        _modalEdit?.Close();
    }

    private async Task LoadFilesEditPet(InputFileChangeEventArgs e)
    {
        ErrorsEditPet.Clear();

        if (e.FileCount != 1)
        {
            ErrorsEditPet.Add("Somente um arquivo é permitido.");
            return;
        }

        if (!_allowedFilesTypes.Any(a => e.File.ContentType.EndsWith(a)))
        {
            ErrorsEditPet.Add($"É permitido apenas arquivos com extensões '{string.Join(',', _allowedFilesTypes)}'.");
            return;
        }

        using MemoryStream memoryStream = new();

        await e.File.OpenReadStream().CopyToAsync(memoryStream);

        _putDosadorViewModel.UpdateImg = true;
        _putDosadorViewModel.NewImage = memoryStream.ToArray();
    }

    private async Task PutEditPetAndSetDosadores()
    {
        try
        {
            _onPutMessage = StateMessage.Sending;

            var success = await PutEditPet();

            if (!success)
                return;

            _modalEdit?.Close();
            await TrySetDosadores();
        }
        finally
        {
            _onPutMessage = StateMessage.Sent;
        }
    }

    private async Task<bool> PutEditPet()
    {
        const string PUT = "api/dosador?idDosador={idDosador}";

        ErrorsEditPet.Clear();

        try
        {
            using var response = await _client.PutAsJsonAsync(
                PUT.Replace("{idDosador}", IdEditDosador.ToString()),
                _putDosadorViewModel);

            var errorsResp = await response.TryGetErrors();

            if (errorsResp.ContainsError)
            {
                ErrorsEditPet.AddRange(errorsResp.ErrorsMessages);
                return false;
            }
        }
        catch
        {
            ErrorsEditPet.Add("Falha ao atualizar Pet.");
            return false;
        }

        return true;
    }

    private async Task AddDosador()
    {
        const string POST = "api/dosador/add";

        SuccessMessages.Clear();
        Errors.Clear();

        try
        {
            using var response = await _client.PostAsJsonAsync(POST, _addDosadorViewModel);

            var errorsResp = await response.TryGetErrors();

            if (errorsResp.ContainsError)
            {
                Errors.AddRange(errorsResp.ErrorsMessages);
                return;
            }

            SuccessMessages.Add("Dosador adicionado com sucesso.");

            await TrySetDosadores();
            _addDosadorViewModel.Token = string.Empty;
        }
        catch
        {
            Errors.Add("Falha ao adicionar dosador.");
        }
    }

    private async Task RemoveDosador(Guid idDosador)
    {
        const string DELETE = "api/dosador/Remove/{{idDosador}}";

        SuccessMessages.Clear();
        Errors.Clear();

        if (Dosadores.Count() < 2)
        {
            Errors.Add("Usuário deve conter um dosador.");
            return;
        }

        try
        {
            using var response = await _client.DeleteAsync(
                DELETE.Replace("{idDosador}", idDosador.ToString()));

            var errorsResp = await response.TryGetErrors();

            if (errorsResp.ContainsError)
            {
                Errors.AddRange(errorsResp.ErrorsMessages);
                return;
            }

            await TrySetDosadores();
            SuccessMessages.Add("Dosador removido com sucesso.");
            _addDosadorViewModel.Token = string.Empty;
        }
        catch
        {
            Errors.Add("Falha ao remover dosador.");
        }
    }

    private static bool IsUnavailableMoreThanTwoDays(JoinUsuarioDosadorInfoViewModel dosador)
    {
        if (dosador.LastSeen is null)
            return true;

        if (dosador.LastSeen.Value.AddDays(2) > DateTime.UtcNow)
            return true;

        return false;
    }

    private static bool ContainsRacao(JoinUsuarioDosadorInfoViewModel dosador)
        => dosador.CurrentWeight > 5;
}
