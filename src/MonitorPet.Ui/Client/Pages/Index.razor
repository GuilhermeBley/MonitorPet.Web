@page "/"
@using MonitorPet.Ui.Shared.Model.Dosador

@inject HttpClient _client

<PageTitle>Dosadores</PageTitle>

<div class="container-md mt-3">
    <div class="row text-end">
        <div>
            <button type="button" class="btn btn-outline-primary">
                <i class="bi bi-plus-circle-fill"></i>
                Adicionar dosadores
            </button>
        </div>
    </div>
    <hr />
    <div class="row text-center">

        <ErrorComponent Errors="Errors"></ErrorComponent>

        @if (!Dosadores.Any() && LoadDosadores == StateMessage.Sent)
        {
            <p>Nenhum dosador cadastrado :(</p>
        }

        @if (LoadDosadores == StateMessage.Sending)
        {
            <LoadComponent></LoadComponent>
        }

        @foreach (var dosador in Dosadores)
        {
            <div class="col-lg-4 mt-3">
                <img class="rounded-circle" src="@(string.IsNullOrEmpty(dosador.ImgUrl) ? Default.ImgUrl.DefaultIconUrl :  dosador.ImgUrl)" width="140" height="140">
                <p><span class="fs-3">@dosador.Nome </span><a><i class="bi bi-three-dots-vertical"></i></a></p>
                <p>
                    <span class="fs-6" title="Útilma vez visto em '@(dosador.LastSeen?.ToLocalTime().ToString() ?? "Não registrado.")'"> 
                        @if (dosador.LastSeen is not null &&
                       dosador.LastSeen.Value.ToUniversalTime() >= LastRefresh.ToUniversalTime().AddMinutes(-1.5))
                        {
                            <span><i class="fa-solid fa-circle" style="color: #00ff1e;"></i> online</span>
                        }
                        else
                        {
                            <span><i class="fa-solid fa-circle" style="color: #ff0000;"></i> offline</span>
                        }
                    </span>
                </p>
                <p>
                    <span class="fs-6" title="Quantidade atual de ração: @dosador.CurrentWeight gramas.">
                        @if (dosador.CurrentWeight > 0.9)
                        {
                            <span><i class="fa-solid fa-bone" style="color: #00ff1e;"></i> Contém ração</span>
                        }
                        else
                        {
                            <span><i class="fa-solid fa-bone" style="color: #ff0000;"></i> Não contém ração</span>
                        }
                    </span>
                </p>
            </div>
        }
    </div>
</div>

@code {
    private DateTime LastRefresh { get; set; }
    private List<string> Errors { get; } = new();
    private IEnumerable<JoinUsuarioDosadorInfoViewModel> Dosadores { get; set; } =
        Enumerable.Empty<JoinUsuarioDosadorInfoViewModel>();
    private StateMessage LoadDosadores { get; set; } = StateMessage.Sending;

    protected override async Task OnInitializedAsync()
    {
        LastRefresh = DateTime.UtcNow;
        await TrySetDosadores();
    }

    private async Task TrySetDosadores()
    {
        try
        {
            LoadDosadores = StateMessage.Sending;
            await SetDosadores();
            LoadDosadores = StateMessage.Sent;
        }
        catch
        {
            LoadDosadores = StateMessage.None;
            Errors.Add("Falha ao coletar dosadores.");
        }
    }

    private async Task SetDosadores()
    {
        using var response = await _client.GetAsync("/api/dosador/info/all");

        var errorsResponse = await response.TryGetErrors();

        if (errorsResponse.ContainsError)
        {
            Errors.Add("Falha em coleta de dosadores.");
            return;
        }

        Dosadores = await response.Content.ReadFromJsonAsync<IEnumerable<JoinUsuarioDosadorInfoViewModel>>()
            ?? Enumerable.Empty<JoinUsuarioDosadorInfoViewModel>();
    }
}
