@layout CenterLayout

@page "/CreateUser"
@using MonitorPet.Ui.Shared.Model.Exceptions
@using MonitorPet.Ui.Shared.Model.User

@inject HttpClient _client

<ErrorComponent Errors="Errors"></ErrorComponent>


<div class="card-body">
    <div class="card shadow-sm p-3">
        <h3 class="text-center">Novo usuário</h3>

        @if (!UserCreated)
        {

            <EditForm Model="UserModelToCreate" OnValidSubmit="(async () => await Create())" autocomplete="off">
                <DataAnnotationsValidator />
                <div class="form-outline mb-4">
                    <label class="form-label" for="createEmailInput">Email</label>
                    <InputText type="email" id="createEmailInput" class="form-control" @bind-Value="UserModelToCreate.Email" />
                    <ValidationMessage For="(()=>UserModelToCreate.Email)"></ValidationMessage>
                </div>

                <div class="form-outline mb-4">
                    <label class="form-label" for="nameInput">Nome</label>
                    <InputText id="nameInput" class="form-control" @bind-Value="UserModelToCreate.Name" />
                    <ValidationMessage For="(()=>UserModelToCreate.Name)"></ValidationMessage>
                </div>

                <div class="form-outline mb-4">
                    <label class="form-label" for="nickNameInput">Apelido</label>
                    <InputText id="nickNameInput" class="form-control" @bind-Value="UserModelToCreate.NickName" />
                    <ValidationMessage For="(()=>UserModelToCreate.NickName)"></ValidationMessage>
                </div>

                <div class="form-outline mb-4">
                    <label class="form-label" for="createPasswordInput">Senha</label>
                    <InputText type="password" id="createPasswordInput" class="form-control" @bind-Value="UserModelToCreate.Password" />
                    <ValidationMessage For="(() => UserModelToCreate.Password)"></ValidationMessage>
                </div>

                <div class="form-outline mb-4">
                    <label class="form-label" for="confirmPasswordInput">Confirmação de senha</label>
                    <InputText type="password" id="confirmPasswordInput" class="form-control" @bind-Value="UserModelToCreate.ConfirmPassword" />
                    <ValidationMessage For="(() => UserModelToCreate.ConfirmPassword)"></ValidationMessage>
                </div>

                <div class="form-outline mb-4">
                    <label class="form-label" for="tokenInput">Chave de acesso ao dosador</label>
                    <InputText id="tokenInput" class="form-control" @bind-Value="UserModelToCreate.TokenAccessDosador" />
                    <ValidationMessage For="(()=>UserModelToCreate.TokenAccessDosador)"></ValidationMessage>
                </div>

                @if (ResultMessage == StateMessage.None)
                {
                    <button type="submit" class="btn btn-primary btn-block mb-4">Registrar-se</button>
                }
                else if (ResultMessage == StateMessage.Sending)
                {
                    <LoadComponent></LoadComponent>
                }
                else
                {
                    <p>E-mail enviado, verifique a caixa de entrada.</p>
                }

                <div class="text-end">
                    <p><a href="/Login">Já tenho cadastro</a></p>
                </div>
            </EditForm>
        }
        @if (UserCreated)
        {
            <p>Criação de conta realizada! Próximo passo é a confirmação do e-mail.</p>
            <p>Verifique o e-mail '@UserModelToCreate.Email' para ativar conta.</p>
        }
    </div>
</div>

@code {
    private List<string> Errors { get; } = new();
    private StateMessage ResultMessage = StateMessage.None;
    private CreateUserViewModel UserModelToCreate { get; set; } = new();
    private bool UserCreated { get; set; } = false;

    private async Task Create()
    {
        Errors.Clear();


        ResultMessage = StateMessage.Sending;

        try
        {
            var resultCreateUser = await _client.PostAsJsonAsync("api/user/create", UserModelToCreate);

            var errorMessage = await resultCreateUser.TryGetErrors();

            if (errorMessage is not null)
            {
                ResultMessage = StateMessage.None;
                Errors.AddRange(errorMessage.ErrorsMessages);
                return;
            }
        }
        catch
        {
            Errors.Add("Falha em criação de usuário.");
            ResultMessage = StateMessage.None;
            return;
        }

        ResultMessage = StateMessage.Sent;
    }
}
