@page "/agendamentos"
@page "/agendamentos/{IdDosador:guid}"
@page "/agendamentos/{IdDosador:guid}/{Id:int}"
@page "/agendamentos/create/{IdDosadorToCreate:guid}"

@using MonitorPet.Ui.Client.Services
@using MonitorPet.Ui.Shared.Model.Agendamento
@using MonitorPet.Ui.Shared.Model.Dosador

@inject HttpClient _client
@inject UserInfoService _userInfo
@inject NavigationManager _nav

<div class="container-md h-100">

    @if (Dosadores.Any())
    {
        <SelectDosadorComponent Dosadores="Dosadores"
                            OnChangeDosador="((d)=>IdDosador=d.IdDosador)">
        </SelectDosadorComponent>
    }

    @if (IdDosadorToCreate == default)
    {
        <div class="modal @ClassUpdateModalCss" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Editar agendamento</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(()=>CloseModalCreateAgendamento())">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <EditFormAgendamentoComponent>
                            <Footer>
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-primary">Salvar</button>
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(()=>CloseModalCreateAgendamento())">Fechar</button>
                                </div>
                            </Footer>
                        </EditFormAgendamentoComponent>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="modal @ClassCreateModalCss" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Criar novo agendamento</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="(()=>CloseModalCreateAgendamento())">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <ErrorComponent Errors="CreateErrors"></ErrorComponent>
                        <EditFormAgendamentoComponent
                            OnValid="(async (model)=> await Create(model))">
                            <Footer>
                                <div class="modal-footer">
                                    <button type="submit" class="btn btn-primary">Adicionar</button>
                                    <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="(()=>CloseModalCreateAgendamento())">Fechar</button>
                                </div>
                            </Footer>
                        </EditFormAgendamentoComponent>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(ClassUpdateModalCss) || !string.IsNullOrEmpty(ClassCreateModalCss))
    {
        <div class="modal-backdrop fade show"></div>
    }

    <ErrorComponent Errors="Errors"></ErrorComponent>
    <SuccessComponent Successes="Successes"></SuccessComponent>

    <div class="schedule-time input-group">
        <h1 class="text-primary"><i class="fa-solid fa-alarm-clock"></i> Agendamentos</h1>
        <button type="button" class="btn btn-outline-success border-0 ms-auto"
                @onclick="OpenModalCreateAgendamento" disabled="@(IdDosador==default)">
            <span class="text-complete">Novo agendamento  </span><i class="fa-sharp fa-solid fa-plus"></i>
        </button>
    </div>
    <hr>
    <div class="row justify-content-center">

        @if (AgendamentosListState == StateMessage.Sending)
        {
            <LoadComponent></LoadComponent>
        }

        @foreach (var agendamento in Agendamentos)
        {
            <div class="col-md-4">
                <div class="schedule-time input-group">
                    <div class="input-group-text">
                        <div class="form-check form-switch">
                            <input class="form-check-input" type="checkbox" id="@agendamento.Id" checked="@agendamento.Ativado">
                        </div>
                        @agendamento.HoraAgendada.ToString(@"hh\:mm") - @GetDaySummaryOfWeek(agendamento.DiaSemana)
                    </div>
                    <button type="button" class="btn btn-outline-secondary" 
                        @onclick="(()=>OpenModalOptionsAgendamento(agendamento.Id))"
                        disabled="@(IdDosador==default)">
                        <i class="fa-solid fa-pen-to-square"></i>
                    </button>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private static Dictionary<int, string> _dayOfWeek { get; }
        = new Dictionary<int, string>(){
            {0, "Domingo"},
            {1, "Segunda"},
            {2, "Terça"},
            {3, "Quarta"},
            {4, "Quinta"},
            {5, "Sexta"},
            {6, "Sábado"},
                };

    private string? ClassUpdateModalCss => IdDosador == default || Id == default ? null : "d-block";
    private string? ClassCreateModalCss => IdDosadorToCreate == default ? null : "d-block";

    private List<string> Errors { get; } = new();
    private List<string> CreateErrors { get; } = new();
    private List<string> UpdateErrors { get; } = new();
    private List<string> Successes { get; } = new();
    private List<AgendamentoViewModel> Agendamentos { get; } = new();

    private IEnumerable<DosadorJoinUsuarioDosadorViewModel> Dosadores { get; set; }
        = Enumerable.Empty<DosadorJoinUsuarioDosadorViewModel>();

    private StateMessage AgendamentosListState = StateMessage.None;

    [Parameter]
    public Guid IdDosador { get; set; } = Guid.Empty;

    [Parameter]
    public Guid IdDosadorToCreate { get; set; } = Guid.Empty;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Dosadores = await GetDosadores();

        IdDosador = Dosadores.FirstOrDefault()?.IdDosador ?? default;

        await UpdateAgendamentoList();
    }

    private void OpenModalOptionsAgendamento(int id)
    {
        Id = id;
        _nav.NavigateTo($"/agendamentos/{IdDosador.ToString()}/{Id}");
    }

    private void OpenModalCreateAgendamento()
    {
        IdDosadorToCreate = IdDosador;
        _nav.NavigateTo($"/agendamentos/create/{IdDosador.ToString()}");
    }

    private void CloseModalCreateAgendamento()
    {
        Guid idDosador;
        if (IdDosadorToCreate != default)
            idDosador = IdDosadorToCreate;
        else
            idDosador = IdDosador;

        Id = 0;
        IdDosadorToCreate = default;

        _nav.NavigateTo($"/agendamentos/{idDosador.ToString()}");
    }

    private async Task<IEnumerable<AgendamentoViewModel>> GetAgendamentos(Guid idDosador)
    {
        const string URI_GET = "/api/agendamento/dosador/{idDosador}";

        try
        {
            using var response = await _client.GetAsync(
                URI_GET.Replace("{idDosador}", idDosador.ToString()));

            var errors = await response.TryGetErrors();

            if (errors.ContainsError)
            {
                Errors.AddRange(errors.ErrorsMessages);
                return Enumerable.Empty<AgendamentoViewModel>();
            }

            return (await response.Content.ReadFromJsonAsync<IEnumerable<AgendamentoViewModel>>())
                ?.OrderBy(a => a.DiaSemana)
                ?? Enumerable.Empty<AgendamentoViewModel>();
        }
        catch
        {
            return Enumerable.Empty<AgendamentoViewModel>();
        }
    }

    private async Task<IEnumerable<DosadorJoinUsuarioDosadorViewModel>> GetDosadores()
    {
        try
        {
            using var response = await _client.GetAsync("/api/dosador/all");

            var errorsResponse = await response.TryGetErrors();

            if (errorsResponse.ContainsError)
            {
                Errors.Add("Falha em coleta de dosadores.");
                return Enumerable.Empty<DosadorJoinUsuarioDosadorViewModel>(); ;
            }

            return await response.Content.ReadFromJsonAsync<IEnumerable<DosadorJoinUsuarioDosadorViewModel>>()
                ?? Enumerable.Empty<DosadorJoinUsuarioDosadorViewModel>();
        }
        catch
        {
            Errors.Add("Falha em coleta de dosadores.");
            return Enumerable.Empty<DosadorJoinUsuarioDosadorViewModel>(); ;
        }
    }

    private async Task Create(CreateAgendamentoViewModel createAgendamentoViewModel)
    {
        const string POST = "/api/agendamento";

        CreateErrors.Clear();

        try
        {
            createAgendamentoViewModel.IdDosador = IdDosadorToCreate;
            using var response = await _client.PostAsJsonAsync(POST, createAgendamentoViewModel);

            var errors = await response.TryGetErrors();

            if (errors.ContainsError)
            {
                CreateErrors.AddRange(errors.ErrorsMessages);
                return;
            }

            CloseModalCreateAgendamento();
            Successes.Add("Agendamento criado com sucesso.");
            await UpdateAgendamentoList();
        }
        catch
        {
            CreateErrors.Add("Falha ao criar agendamento.");
        }
    }

    private async Task UpdateAgendamentoList()
    {
        AgendamentosListState = StateMessage.Sending;

        Agendamentos.Clear();

        Agendamentos.AddRange(await GetAgendamentos(IdDosador));

        AgendamentosListState = StateMessage.Sent;
    }

    private static string GetDaySummaryOfWeek(int day)
    {
        _dayOfWeek.TryGetValue(day, out string? value);

        return value ?? string.Empty;
    }
}
