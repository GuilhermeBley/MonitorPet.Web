@layout CenterLayout

@page "/SendConfirmationEmail"
@using MonitorPet.Ui.Shared.Model.Exceptions
@using MonitorPet.Ui.Shared.Model.User

@inject HttpClient _client

<PageTitle>Envio de confirmação</PageTitle>

<ErrorComponent></ErrorComponent>

<div class="card-body">
    <div class="card shadow-sm p-3">
        <h3 class="text-center">Envio e-mail de confirmação de conta</h3>
        <EditForm Model="ConfirmEmailViewModel" OnValidSubmit="@(async () => await SendEmailConfirmation())">
            <DataAnnotationsValidator />
            <div class="form-outline mb-4">
                <label class="form-label" for="emailInput">Email</label>
                <InputText type="email" id="emailInput" class="form-control" @bind-Value="ConfirmEmailViewModel.Email" />
                <ValidationMessage For="(()=>ConfirmEmailViewModel.Email)"></ValidationMessage>
            </div>

            @if (!IsSendEmailConfirmation)
            {
                <button type="submit" class="btn btn-primary btn-block mb-4">Enviar e-mail</button>
            }
            @if (IsSendEmailConfirmation)
            {
                <p>E-mail enviado com sucesso! Verifique sua caixa de entrada para a confirmação.</p>
            }
        </EditForm>
    </div>
</div>

@code {
    private ConfirmEmailViewModel ConfirmEmailViewModel { get; set; } = new();
    private bool IsSendEmailConfirmation { get; set; } = false;
    private List<string> Errors { get; set; } = new();

    private async Task SendEmailConfirmation()
    {
        if (IsSendEmailConfirmation)
            return;

        IsSendEmailConfirmation = true;

        using var response =
            await _client.PostAsJsonAsync("api/login/sendemailconfirmaccount", ConfirmEmailViewModel);
    }
}
