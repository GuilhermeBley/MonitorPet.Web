@layout CenterLayout

@page "/ForgotPassword"
@using MonitorPet.Ui.Shared.Model.Exceptions
@using MonitorPet.Ui.Shared.Model.User

@inject HttpClient _client


<div class="card-body">
    <div class="card shadow-sm p-3">
        <h3>Esqueceu a senha?</h3>

        <EditForm Model="ForgotPasswordModel" OnValidSubmit="(async ()=> await SendEmailFogotPassword())">
            <DataAnnotationsValidator />
            <div class="form-outline mb-4">
                <label class="form-label" for="emailInput">Email</label>
                <InputText type="email" id="emailInput" class="form-control" @bind-Value="ForgotPasswordModel.EmailAddress" />
                <ValidationMessage For="(()=>ForgotPasswordModel.EmailAddress)"></ValidationMessage>
            </div>



            @if (SendEmailMessage == StateMessage.None)
            {
                <button type="submit" class="btn btn-primary btn-block mb-4">Enviar e-mail</button>
            }
            else if (SendEmailMessage == StateMessage.Sending)
            {
                <LoadComponent></LoadComponent>
            }
            else
            {
                <p>E-mail enviado, verifique a caixa de entrada.</p>
            }

            <div class="text-end">
                <p><a href="/Login">Retornar para Login</a></p>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private StateMessage SendEmailMessage { get; set; } = StateMessage.None;
    private List<string> Errors { get; } = new();
    private ForgotPasswordViewModel ForgotPasswordModel { get; set; } = new();

    private async Task SendEmailFogotPassword()
    {
        Errors.Clear();

        SendEmailMessage = StateMessage.Sending;

        try
        {
            using var response =
                await _client.PostAsJsonAsync("/api/Login/SendEmailForgotPassword", ForgotPasswordModel);

            var responseError = await response.TryGetErrors();

            if (responseError.ContainsError)
            {
                Errors.AddRange(responseError.ErrorsMessages);
                SendEmailMessage = StateMessage.None;
                return;
            }

            SendEmailMessage = StateMessage.Sent;
        }
        catch
        {
            Errors.Add("Falha ao enviar e-mail.");
            SendEmailMessage = StateMessage.None;
            return;
        }
    }
}
