@layout CenterLayout

@page "/ChangePassword/{Token}/Change"
@using MonitorPet.Ui.Shared.Model.Exceptions
@using MonitorPet.Ui.Shared.Model.User

@inject HttpClient _client
@inject Services.LocalStorageService _localStorage
@inject NavigationManager _navigation
@inject Services.JwtTokenService _tokenService

<PageTitle>Alterar senha</PageTitle>

<ErrorComponent Errors="Errors"></ErrorComponent>

<div class="card-body">
    <div class="card shadow-sm p-3">
        <h3 class="text-center">Alterar senha</h3>

        <EditForm Model="ChangePasswordModel" OnValidSubmit="@(async () => await ChangePassword())" autocomplete="off">
            <DataAnnotationsValidator />

            <div class="form-outline mb-4">
                <label class="form-label" for="email">Email</label>
                <input id="email" class="form-control" Value="@Email" disabled />
            </div>

            <div class="form-outline mb-4">
                <label class="form-label" for="createPasswordInput">Senha</label>
                <InputText type="password" id="createPasswordInput" class="form-control" @bind-Value="ChangePasswordModel.Password" />
                <ValidationMessage For="(() => ChangePasswordModel.Password)"></ValidationMessage>
            </div>

            <div class="form-outline mb-4">
                <label class="form-label" for="confirmPasswordInput">Confirmação de senha</label>
                <InputText type="password" id="confirmPasswordInput" class="form-control" @bind-Value="ChangePasswordModel.ConfirmPassword" />
                <ValidationMessage For="(() => ChangePasswordModel.ConfirmPassword)"></ValidationMessage>
            </div>

            @if (ResultMessage == StateMessage.None)
            {
                <button type="submit" class="btn btn-primary btn-block mb-4">Alterar senha</button>
            }
            else if (ResultMessage == StateMessage.Sending)
            {
                <LoadComponent></LoadComponent>
            }
            else
            {
                <p>Senha alterada, redirecionando...</p>
            }

            <div class="text-end">
                <p><a href="/Login">Retornar para Login</a></p>
            </div>
        </EditForm>
    </div>
</div>


@code {
    private List<string> Errors { get; } = new();
    private StateMessage ResultMessage = StateMessage.None;
    private ChangePasswordViewModel ChangePasswordModel { get; set; } = new();
    private string Email { get; set; } = string.Empty;

    [Parameter]
    public string Token { get; set; } = string.Empty;

    protected override void OnInitialized()
    {
        var tokenInfo =
            _tokenService.GetTokenInfo(Token);

        var email =
            tokenInfo.Claims.FirstOrDefault(
                claim => string.Equals("emailaddress", claim.Type, StringComparison.OrdinalIgnoreCase))?.Value;

        if (tokenInfo.IsExpired())
            Errors.Add("Token já expirado.");

        Email = email ?? string.Empty;
    }

    private async Task ChangePassword()
    {
        Errors.Clear();

        ResultMessage = StateMessage.Sending;

        try
        {
            using var message = new HttpRequestMessage(HttpMethod.Post, "api/login/ConfirmForgotPassword");
            message.Content = JsonContent.Create(ChangePasswordModel);
            message.Headers.Authorization =
                new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", Token);
            using var postChangePass =
                await _client.SendAsync(message);

            var errorMessage = await postChangePass.TryGetErrors();

            if (errorMessage.ContainsError)
            {
                ResultMessage = StateMessage.None;
                Errors.AddRange(errorMessage.ErrorsMessages);
                return;
            }

            var resultLogin = await postChangePass.Content.ReadFromJsonAsync<ResultAccessAccountViewModel>();

            if (resultLogin is null ||
                resultLogin.Token is null)
            {
                Errors.Add("Falha em Login. Tente novamente.");
                return;
            }

            await _localStorage.SetItem(Services.AuthenticationStateService.DEFAUL_LOCAL_STORAGE, resultLogin.Token);

            _navigation.NavigateTo("/", true);

            ResultMessage = StateMessage.Sent;
        }
        catch
        {
            Errors.Add("Falha em criação de usuário.");
            ResultMessage = StateMessage.None;
            return;
        }
    }
}

