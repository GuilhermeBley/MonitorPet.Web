@using MonitorPet.Ui.Shared.Model.Dosador

@if (CurrentSelected is not null)
{
    <div class="btn-group">
        <button type="button" class="btn dropdown-toggle fs-2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false"
            disabled="@(Dosadores.Count()<=1)">
            <img class="rounded-circle" src="@(string.IsNullOrEmpty(CurrentSelected.ImgUrl) ? Default.ImgUrl.DefaultIconUrl :  CurrentSelected.ImgUrl)" width="140" height="140">
            @CurrentSelected.Nome
        </button>
        <div class="dropdown-menu dropdown-menu-right">
            @foreach(var option in AllMinusCurrent)
            {
                <button class="dropdown-item" type="button" @onclick="(async ()=> await ChangeOptionsAndCallEvent(option))">@option.Nome</button>   
            }
        </div>
    </div>
}

@code {

    private JoinUsuarioDosadorInfoViewModel? CurrentSelected { get; set; }

    private IEnumerable<JoinUsuarioDosadorInfoViewModel> AllMinusCurrent =>
        Dosadores.Where(d => d.IdDosador != CurrentSelected?.IdDosador);

    [Parameter]
    public IEnumerable<JoinUsuarioDosadorInfoViewModel> Dosadores { get; set; }
        = Enumerable.Empty<JoinUsuarioDosadorInfoViewModel>();

    [Parameter]
    public EventCallback<JoinUsuarioDosadorInfoViewModel> OnChangeDosador { get; set; }

    [Parameter]
    public Guid? StartDosadorSelected { get; set; }

    protected override void OnInitialized()
    {
        CurrentSelected = 
            Dosadores.FirstOrDefault(d => d.IdDosador == StartDosadorSelected)
            ?? Dosadores.FirstOrDefault();
    }

    private async Task ChangeOptionsAndCallEvent(JoinUsuarioDosadorInfoViewModel dosadorSelected)
    {
        CurrentSelected = dosadorSelected;

        await OnChangeDosador.InvokeAsync(dosadorSelected);
    }
}
